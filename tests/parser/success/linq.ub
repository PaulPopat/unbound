namespace Linq {
  export fn select(self: [use any = T], selector: (item: T) -> use any = R): [R] {
    return iterate (self as item) {
      return item.selector();
    };
  }

  export fn where(self: [use any = T], predicate: (item: T) -> bool): [T] {
    return iterate (self as item) {
      return if (item.predicate()) {
        return item;
      } else {
        return skip;
      };
    };
  }
}

namespace LinqUser {
  using Linq;

  export struct User {
    username: [char];
  }

  export fn sort_users(self: [User]) {
    return self.where(fn (user) -> user.username == "valid user")
               .select(fn (user) -> make User {
                  assign username = "Do I really need to say this?";
               });
  }
}